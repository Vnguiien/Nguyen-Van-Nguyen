package smtp_simulator_01;

import java.io.*;
import java.net.*;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * M√°y ch·ªß m√¥ ph·ªèng SMTP (giao ti·∫øp b·∫±ng ƒë·ªëi t∆∞·ª£ng).
 * H·ªó tr·ª£ nhi·ªÅu client c√πng l√∫c.
 * L∆∞u tr·ªØ t√†i kho·∫£n v√† email trong SQLite qua DatabaseHelper.
 */
public class SMTPServer {
    private final int port;
    // Danh s√°ch ng∆∞·ªùi d√πng ƒëang online: username(lowercase) -> lu·ªìng xu·∫•t ƒë·ªëi t∆∞·ª£ng
    private final Map<String, ClientConnection> online = new ConcurrentHashMap<>();

    public SMTPServer(int port) {
        this.port = port;
    }

    public void start() {
        try (ServerSocket ss = new ServerSocket(port)) {
            System.out.println("‚úÖ SMTPServer kh·ªüi ƒë·ªông tr√™n c·ªïng " + port);
            while (true) {
                Socket s = ss.accept();
                new Thread(new Worker(s)).start();
            }
        } catch (IOException e) {
            System.err.println("‚ùå L·ªói server: " + e.getMessage());
        }
    }

    private class Worker implements Runnable {
        private final Socket socket;
        Worker(Socket socket) { this.socket = socket; }

        public void run() {
            String loggedUser = null;
            try (ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                 ObjectInputStream ois = new ObjectInputStream(socket.getInputStream())) {

                Object o;
                while ((o = ois.readObject()) != null) {
                    if (!(o instanceof Command)) continue;
                    Command cmd = (Command) o;
                    switch (cmd.type) {
                        case REGISTER -> {
                            String[] reg = (String[]) cmd.payload;
                            boolean ok = DatabaseHelper.registerUser(reg[0], reg[1]);
                            oos.writeObject(ok ? Response.ok("ƒêƒÉng k√Ω th√†nh c√¥ng") : Response.err("T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i"));
                            oos.flush();
                        }
                        case LOGIN -> {
                            String[] lg = (String[]) cmd.payload;
                            boolean ok = DatabaseHelper.loginUser(lg[0], lg[1]);
                            if (ok) {
                                loggedUser = lg[0].toLowerCase();
                                // ghi nh·∫≠n client online
                                online.put(loggedUser, new ClientConnection(loggedUser, oos));
                                oos.writeObject(Response.ok("ƒêƒÉng nh·∫≠p th√†nh c√¥ng"));
                                oos.flush();
                                // g·ª≠i h·ªôp th∆∞ ƒë√£ l∆∞u
                                for (EmailMessage m : DatabaseHelper.getInbox(loggedUser)) {
                                    oos.writeObject(m);
                                    oos.flush();
                                }
                                System.out.println("üë§ Ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p: " + loggedUser);
                            } else {
                                oos.writeObject(Response.err("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u"));
                                oos.flush();
                            }
                        }
                        case SEND -> {
                            EmailMessage msg = (EmailMessage) cmd.payload;
                            if (msg == null) {
                                oos.writeObject(Response.err("Tin nh·∫Øn r·ªóng"));
                                oos.flush();
                                continue;
                            }
                            // l∆∞u v√†o DB
                            DatabaseHelper.saveEmail(msg);
                            // chuy·ªÉn ti·∫øp n·∫øu ng∆∞·ªùi nh·∫≠n ƒëang online
                            ClientConnection dest = online.get(msg.to.toLowerCase());
                            if (dest != null) {
                                try { dest.sendObject(msg); }
                                catch (IOException ex) {
                                    System.err.println("‚ö†Ô∏è G·ª≠i ti·∫øp th·∫•t b·∫°i: " + ex.getMessage());
                                }
                            }
                            oos.writeObject(Response.ok("Tin nh·∫Øn ƒë√£ l∆∞u/g·ª≠i"));
                            oos.flush();
                        }
                        case LOGOUT -> {
                            if (loggedUser != null) {
                                online.remove(loggedUser);
                                oos.writeObject(Response.ok("ƒê√£ ƒëƒÉng xu·∫•t"));
                                oos.flush();
                                System.out.println("üëã Ng∆∞·ªùi d√πng tho√°t: " + loggedUser);
                            }
                        }
                        case PING -> {
                            oos.writeObject(Response.ok("PONG"));
                            oos.flush();
                        }
                    }
                }
            } catch (EOFException | SocketException e) {
                // Client ƒë√≥ng k·∫øt n·ªëi ho·∫∑c reset
                System.out.println("‚ùé Client ng·∫Øt k·∫øt n·ªëi: " + socket.getRemoteSocketAddress());
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (loggedUser != null) {
                    online.remove(loggedUser);
                }
                try { socket.close(); } catch (IOException ignored) {}
            }
        }
    }

    private static class ClientConnection {
        final String username;
        final ObjectOutputStream out;
        ClientConnection(String username, ObjectOutputStream out) {
            this.username = username;
            this.out = out;
        }
        synchronized void sendObject(Object o) throws IOException {
            out.writeObject(o);
            out.flush();
            out.reset();
        }
    }

    public static void main(String[] args) {
        int port = 2525;
        SMTPServer server = new SMTPServer(port);
        server.start();
    }
}
